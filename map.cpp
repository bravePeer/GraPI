#include "map.h"

Map::Map()
{

}

Map::~Map()
{
	for (int i = 0; i < mobs.size(); i++)
	{
		delete mobs[i];
	}
	mobs.clear();
	for (int i = 0; i < people.size(); i++)
	{
		delete people[i];
	}
	people.clear();
}

int Map::Load1map()
{
	map[0] =  ".........dddddddddddd.....................................................................................";
	map[1] =  ".H....S........N..........................................................................................";
	map[2] =  "..........................................................................................................";
	map[3] =  "............._______......................................................................................";
	map[4] =  ".______...................................................................................................";
	map[5] =  "..........................................................................................................";
	map[6] =  "..........................................................................................................";
	map[7] =  "....._______....N.........................................................................................";
	map[8] =  "..............|...........................................................................................";
	map[9] =  "..............|...........................................................................................";
	map[10] = "....N.....S...|....P......................................................................................";
	map[11] = "..........................................................................................................";
	map[12] = "..........................................................................................................";
	map[13] = "..........................................................................................................";
	map[14] = "..........................................................................................................";
	map[15] = "..........................................................................................................";
	map[16] = "..........................................................................................................";
	map[17] = "..........................................................................................................";
	map[18] = "..........................................................................................................";
	map[19] = "..........................................................................................................";
	map[20] = "..........................................................................................................";
	map[21] = "..........................................................................................................";
	map[22] = "..........................................................................................................";
	map[23] = "..........................................................................................................";
	map[24] = "..........................................................................................................";
	map[25] = "..........................................................................................................";
	map[26] = "..........................................................................................................";
	map[27] = "..........................................................................................................";
	map[28] = "..........................................................................................................";
	map[29] = "..........................................................................................................";
	map[30] = "..........................................................................................................";
	map[31] = "|........................................................................................................|";
	mapSize = Point(107,32);
	return 1;
/*
   h-home
   N-npc
   S sklep
   P przejscie
   */
}

int Map::Load2map()
{
	map[0] =  "+-------------------+";
	map[1] =  "|N..................|";
	map[2] =  "|...............N...|";
	map[3] =  "|....__________.....|";
	map[4] =  "|.........|.........|";
	map[5] =  "|.........|.........|";
	map[6] =  "|.........|......S..|";
	map[7] =  "|.........|.........|";
	map[8] =  "|.....S...|.........|";
    map[9] =  "|.........|...N.....|";
   map[10] =  "|p........|........H|";
   map[11] =  "+-------------------+";
   mapSize = Point(107,32);
   return 2;
/*
   h-home
   N-npc
   S sklep
   P przejscie
   */
}

int Map::Load3map()
{
	map[0] =  "|                    ┃";
	map[1] =  "|..S...............B|";
	map[2] =  "|...............N...|";
	map[3] =  "|......_____________|";
	map[4] =  "|...................|";
	map[5] =  "|...N...............|";
	map[6] =  "|...................|";
	map[7] =  "|______________.....|";
	map[8] =  "|...N...............|";
    map[9] =  "|...................|";
   map[10] =  "|H..........S.......|";
   map[11] =  "+-------------------+";
   mapSize = Point(22,12);
   return 3;
/*
   h-home
   N-npc
   S sklep
   P przejscie
   b- boss
   */
}

void Map::ShowMap()
{
	for (int i = 0; i < mapSize.y; i++)
	{
		for (int j = 0; j < mapSize.x; j++)
		{
			CDrawText("", { (short)j, (short)i }, 0x0003);
			cout << map[i][j] ;
		}
		cout << endl;
	}/**/
}

/*Wyswietla mape*/
void Map::ShowMap(Point& playerPos)
{
	CDrawText(buf, { (short)lastPlayerPos.x,(short)lastPlayerPos.y }, 0x0003);
	buf = map[playerPos.y][playerPos.x];
	lastPlayerPos = playerPos;

	CDrawText(L"\u1d25", { (short)playerPos.x,(short)playerPos.y }, 0x0004);
	CDrawText("Pozycja x: " + to_string(playerPos.x) + " y:" + to_string(playerPos.y), { 10,0 }, 0x0003);

	for (int i = 0; i < mobs.size(); i++)
	{
		CDrawText("X", { (short)mobs[i]->position.x,(short)mobs[i]->position.y }, 0x000c);
	}
}

/*Dystans miedy 2 punktami*/
float Map::Distance(Point p1, Point p2)
{
	Point p = p1 - p2;
	return sqrtf((p.x * p.x) + (p.y * p.y));
}

/*Czy walka*/
int Map::IsFight(Point &playerPos)
{
	for (int i = 0; i < mobs.size(); i++)
	{
		if (mobs[i]->position.x == playerPos.x && mobs[i]->position.y == playerPos.y)
			return i + 1;
	}
	return 0;
}
/*Zabicie moba*/
void Map::KillMob(int pos)
{
	delete mobs[pos];
	mobs.erase(mobs.begin() + pos);
}

bool Map::CanMove(Point &point)
{
	if(map[point.y][point.x]=='|' || map[point.y][point.x]=='-' ||map[point.y][point.x]=='_' ||map[point.y][point.x]=='+')
	{
		return false;
	}
	return true;
}

bool Map::MoveToHome(int x,int y)
{
	
	return true;
}
